{
    "activationEvents": [
        "onDebugResolve:cortex-debug",
        "onDebugResolve:jlink-gdb",
        "onDebugResolve:openocd-gdb",
        "onDebugResolve:pyocd-gdb",
        "onDebugResolve:pe-gdb",
        "onDebugResolve:stutil-gdb"
    ],
    "categories": [
        "Debuggers"
    ],
    "contributes": {
        "configuration": {
            "type": "object",
            "title": "Cortex-Debug Configuration",
            "properties": {
                "cortex-debug.armToolchainPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Path to the GCC Arm Toolchain (prefix arm-none-eabi) to use. If not set the tools must be on the system path. Do not include the executable file name in this path."
                },
                "cortex-debug.JLinkGDBServerPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Path to the JLink GDB Server. If not set then JLinkGDBServer (JLinkGDBServerCL.exe on Windows) must be on the system path."
                },
                "cortex-debug.openocdPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Path to the OpenOCD GDB Server executable. If not set then openocd (openocd.exe on Windows) must be on the system path."
                },
                "cortex-debug.pyocdPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Path to the PyOCD GDB Server executable. If not set then pyocd-gdbserver must be on the system path."
                },
                "cortex-debug.PEGDBServerPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Path to the PEMicro GDB Server. If not set then PEGDBServer (pegdbserver_console.exe on Windows) must be on the system path."
                },
                "cortex-debug.stutilPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Path to the Texane's ST-Util GDB Server executable. If not set then st-util (st-util.exe on Windows) must be on the system path."
                },
                "cortex-debug.enableTelemetry": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable Telemetry for the Cortex-Debug Extension. Reporting will also respect the global telemetry.enableTelemetry setting."
                }
            }
        },
        "commands": [
            {
                "command": "cortex-debug.peripherals.updateNode",
                "title": "Update Value"
            },
            {
                "command": "cortex-debug.peripherals.selectedNode",
                "title": "Selected"
            },
            {
                "command": "cortex-debug.registers.selectedNode",
                "title": "Selected"
            },
            {
                "command": "cortex-debug.peripherals.copyValue",
                "title": "Copy Value"
            },
            {
                "command": "cortex-debug.registers.copyValue",
                "title": "Copy Value"
            },
            {
                "command": "cortex-debug.peripherals.setFormat",
                "title": "Set Value Format"
            },
            {
                "command": "cortex-debug.registers.setFormat",
                "title": "Set Value Format"
            },
            {
                "command": "cortex-debug.peripherals.forceRefresh",
                "title": "Refresh"
            },
            {
                "category": "Cortex-Debug",
                "command": "cortex-debug.examineMemory",
                "title": "View Memory"
            },
            {
                "category": "Cortex-Debug",
                "command": "cortex-debug.examineMemory2",
                "title": "View Memory2"
            },
            {
                "category": "Cortex-Debug",
                "command": "cortex-debug.viewDisassembly",
                "title": "View Disassembly (Function)"
            },
            {
                "category": "Cortex-Debug",
                "command": "cortex-debug.setForceDisassembly",
                "title": "Set Force Disassembly"
            }
        ],
        "languages": [
            {
                "id": "cortex-debug.disassembly",
                "aliases": [
                    "Cortex-Debug Disassembly"
                ],
                "extensions": [
                    ".cdasm"
                ]
            },
            {
                "id": "cortex-debug.memoryview",
                "aliases": [
                    "Cortex-Debug Memory View"
                ],
                "extensions": [
                    ".cdmem"
                ]
            }
        ],
        "grammars": [
            {
                "language": "cortex-debug.disassembly",
                "scopeName": "source.cortex-debug-disassembly",
                "path": "./syntaxes/cortex-debug-disassembly.json"
            },
            {
                "language": "cortex-debug.memoryview",
                "scopeName": "source.cortex-debug-memoryview",
                "path": "./syntaxes/cortex-debug-memoryview.json"
            }
        ],
        "debuggers": [
            {
                "configurationAttributes": {
                    "attach": {
                        "properties": {
                            "servertype": {
                                "type": "string",
                                "description": "GDB Server type - supported types are jlink, openocd, pyocd, pe and stutil",
                                "enum": [
                                    "jlink",
                                    "openocd",
                                    "pyocd",
                                    "stutil",
                                    "bmp",
                                    "pe",
                                    "qemu"
                                ]
                            },
                            "cwd": {
                                "description": "Path of project",
                                "type": "string"
                            },
                            "debuggerArgs": {
                                "default": [],
                                "description": "Additional arguments to pass to GDB command line",
                                "type": "array"
                            },
                            "preAttachCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed at the start of the main attach sequence (immediately after attaching to target)."
                            },
                            "postAttachCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed after the main attach sequence has finished."
                            },
                            "preRestartCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed at the beginning of the restart sequence (after interrupting execution)."
                            },
                            "postRestartCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed at the end of the restart sequence."
                            },
                            "cpu": {
                                "default": "cortex-m3",
                                "type": "string",
                                "description": "CPU Type Selection - used for QEMU server type",
                                "enum": [
                                    "cortex-m3",
                                    "cortex-m4"
                                ]
                            },
                            "machine": {
                                "default": "lm3s811evb",
                                "type": "string",
                                "description": "Machine Type Selection - used for QEMU server type",
                                "enum": [
                                    "lm3s811evb",
                                    "lm3s6965evb"
                                ]
                            },
                            "device": {
                                "default": "",
                                "description": "Target Device Identifier",
                                "type": "string"
                            },
                            "rtos": {
                                "default": null,
                                "description": "RTOS being used. For JLink this can be FreeRTOS, embOS or the path to a custom JLink RTOS Plugin library. For OpenOCD this can be eCos, ThreadX, FreeRTOS, ChibiOS, embKernel, mqx, or uCOS-III.",
                                "type": "string"
                            },
                            "armToolchainPath": {
                                "default": null,
                                "description": "This setting can be used to override the armToolchainPath user setting for a particular launch configuration. This should be the path where arm-none-eabi-gdb and arm-none-eabi-objdump are located.",
                                "type": "string"
                            },
                            "executable": {
                                "description": "Path of executable",
                                "type": "string"
                            },
                            "graphConfig": {
                                "items": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "annotate": {
                                                    "default": true,
                                                    "description": "Create annotations on the graph for when the target processor starts and stops execution. (green line for starting execution, red line for stopping execution).",
                                                    "type": "boolean"
                                                },
                                                "label": {
                                                    "description": "Label for Graph",
                                                    "type": "string"
                                                },
                                                "maximum": {
                                                    "default": 65535,
                                                    "description": "Maximum value for the X-Axis",
                                                    "type": "number"
                                                },
                                                "minimum": {
                                                    "default": 0,
                                                    "description": "Minimum value for the Y-Axis",
                                                    "type": "number"
                                                },
                                                "plots": {
                                                    "description": "Plot configurations. Data sources must be configured for \"graph\" (or \"advanced\" with a decoder that sends graph data) in the \"swoConfig\" section",
                                                    "items": {
                                                        "properties": {
                                                            "color": {
                                                                "pattern": "^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$",
                                                                "type": "string"
                                                            },
                                                            "graphId": {
                                                                "description": "Graph Data Source Id for the plot.",
                                                                "type": "string"
                                                            },
                                                            "label": {
                                                                "description": "A label for this data set",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "graphId"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "timespan": {
                                                    "default": 30,
                                                    "description": "Length of time (seconds) to be plotted on screen.",
                                                    "type": "number"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "realtime"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "label",
                                                "plots",
                                                "minimum",
                                                "maximum"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "label": {
                                                    "description": "Label for graph",
                                                    "type": "string"
                                                },
                                                "timespan": {
                                                    "default": 10,
                                                    "description": "The amount of time (seconds) that the XY Plot will show the trace for.",
                                                    "type": "number"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "x-y-plot"
                                                    ],
                                                    "type": "string"
                                                },
                                                "xGraphId": {
                                                    "description": "Graph Data Source Id for the X axis",
                                                    "type": "string"
                                                },
                                                "xMaximum": {
                                                    "default": 65535,
                                                    "description": "Maximum value on the X-Axis",
                                                    "type": "number"
                                                },
                                                "xMinimum": {
                                                    "default": 0,
                                                    "description": "Minimum value on the X-Axis",
                                                    "type": "number"
                                                },
                                                "yGraphId": {
                                                    "description": "Graph Data Source Id Port for the Y axis",
                                                    "type": "string"
                                                },
                                                "yMaximum": {
                                                    "default": 65535,
                                                    "description": "Maximum value on the Y-Axis",
                                                    "type": "number"
                                                },
                                                "yMinimum": {
                                                    "default": 0,
                                                    "description": "Minimum value on the Y-Axis",
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "xGraphId",
                                                "yGraphId",
                                                "label"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            "showDevDebugOutput": {
                                "default": false,
                                "description": "Prints all GDB responses to the console",
                                "type": "boolean"
                            },
                            "svdFile": {
                                "default": null,
                                "description": "Path to an SVD file describing the peripherals of the microcontroller; if not supplied then one may be selected based upon the 'device' entered.",
                                "type": "string"
                            },
                            "swoConfig": {
                                "properties": {
                                    "cpuFrequency": {
                                        "default": 0,
                                        "description": "Target CPU frequency in Hz; 0 will attempt to automatically calculate.",
                                        "type": "number"
                                    },
                                    "enabled": {
                                        "default": false,
                                        "description": "Enable SWO decoding.",
                                        "type": "boolean"
                                    },
                                    "source": {
                                        "type": "string",
                                        "default": "probe",
                                        "description": "Source for SWO data. Can either be \"probe\" to get directly from debug probe, or a serial port device to use a serial port external to the debug probe."
                                    },
                                    "decoders": {
                                        "description": "SWO Decoder Configuration",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "properties": {
                                                        "label": {
                                                            "description": "A label for the output window.",
                                                            "type": "string"
                                                        },
                                                        "showOnStartup": {
                                                            "description": "If true, switches to this output when starting a debug session.",
                                                            "type": "boolean"
                                                        },
                                                        "port": {
                                                            "description": "ITM Port Number",
                                                            "maximum": 31,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "console"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "encoding": {
                                                            "type": "string",
                                                            "default": "utf8",
                                                            "enum": [
                                                                "ascii",
                                                                "utf8",
                                                                "ucs2",
                                                                "utf16le"
                                                            ]
                                                        }
                                                    },
                                                    "required": [
                                                        "port"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "encoding": {
                                                            "default": "unsigned",
                                                            "description": "This property is only used for binary and graph output formats.",
                                                            "enum": [
                                                                "unsigned",
                                                                "signed",
                                                                "Q16.16",
                                                                "float"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "label": {
                                                            "description": "A label for the output window.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "ITM Port Number",
                                                            "maximum": 31,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "scale": {
                                                            "default": 1,
                                                            "description": "This setting will scale the raw value from the ITM port by the specified value. Can be used, for example, to scale a raw n-bit ADC reading to a voltage value. (e.g to scale a 12-bit ADC reading to a 3.3v scale you would need a scale value of 3.3/4096 = 0.0008056640625",
                                                            "type": "number"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "binary"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "encoding": {
                                                            "default": "unsigned",
                                                            "description": "This property is only used for binary and graph output formats.",
                                                            "enum": [
                                                                "unsigned",
                                                                "signed",
                                                                "Q16.16",
                                                                "float"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "graphId": {
                                                            "description": "The identifier to use for this data in graph configurations.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "ITM Port Number",
                                                            "maximum": 31,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "scale": {
                                                            "default": 1,
                                                            "description": "This setting will scale the raw value from the ITM port by the specified value. Can be used, for example, to scale a raw n-bit ADC reading to a voltage value. (e.g to scale a 12-bit ADC reading to a 3.3v scale you would need a scale value of 3.3/4096 = 0.0008056640625",
                                                            "type": "number"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "graph"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "graphId"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "config": {
                                                            "additionalProperties": true,
                                                            "type": "object"
                                                        },
                                                        "decoder": {
                                                            "description": "Path to a javascript module to implement the decoding functionality.",
                                                            "type": "string"
                                                        },
                                                        "ports": {
                                                            "description": "ITM Port Numbers",
                                                            "type": "array",
                                                            "items": {
                                                                "maximum": 31,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "advanced"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "ports",
                                                        "decoder"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "swoFrequency": {
                                        "default": 0,
                                        "description": "SWO frequency in Hz; 0 will attempt to automatically calculate.",
                                        "type": "number"
                                    }
                                },
                                "required": [],
                                "type": "object"
                            },
                            "ipAddress": {
                                "default": null,
                                "description": "IP Address for networked J-Link Adapter",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$",
                                "type": "string"
                            },
                            "serialNumber": {
                                "default": null,
                                "description": "J-Link Serial Number - only needed if multiple J-Links are connected to the computer",
                                "type": "string"
                            },
                            "interface": {
                                "default": "swd",
                                "description": "Debug Interface type to use for connections (defaults to SWD) - Used for J-Link and BMP probes.",
                                "type": "string",
                                "enum": [
                                    "swd",
                                    "jtag"
                                ]
                            },
                            "configFiles": {
                                "description": "OpenOCD configuration file(s) to load",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "searchDir": {
                                "default": [],
                                "description": "OpenOCD dir to search for config files and scripts",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "v1": {
                                "default": false,
                                "description": "Set this to true if your debug probe is a ST-Link V1 (for example, the ST-Link on the STM32 VL Discovery is a V1 device). When set to false a ST-Link V2 device is used.",
                                "type": "boolean"
                            },
                            "targetId": {
                                "description": "On BMP this is the ID number that should be passed to the attach command (defaults to 1); for PyOCD this is the target identifier (only needed for custom hardware)",
                                "anyOf": [
                                    {
                                        "enum": [
                                            "kl25z",
                                            "kl26z",
                                            "lpc824",
                                            "k82f25615",
                                            "lpc11xx_32",
                                            "kinetis",
                                            "lpc800",
                                            "lpc4088qsb",
                                            "maxwsnenv",
                                            "kl05z",
                                            "k64f",
                                            "lpc1768",
                                            "lpc4088",
                                            "lpc4330",
                                            "max32600mbed",
                                            "k66f18",
                                            "w7500",
                                            "ke18f16",
                                            "k22f",
                                            "lpc4088dm",
                                            "ke15z7",
                                            "kv11z7",
                                            "nrf51",
                                            "nrf52",
                                            "kv10z7",
                                            "k20d50m",
                                            "kl46z",
                                            "stm32f103rc",
                                            "kl27z4",
                                            "kw40z4",
                                            "cortex_m",
                                            "lpc11u24",
                                            "stm32f051",
                                            "kl02z",
                                            "ncs36510",
                                            "kl28z",
                                            "kl43z4",
                                            "kw01z4"
                                        ],
                                        "type": "string"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 1
                                    }
                                ]
                            },
                            "boardId": {
                                "description": "PyOCD Board Identifier. Needed if multiple compatible boards are connected.",
                                "type": "string"
                            },
                            "BMPGDBSerialPort": {
                                "type": "string",
                                "description": "The serial port for the Black Magic Probe GDB server. On Windows this will be \"COM<num>\", on Linux this will be something similar to /dev/ttyACM0, on OS X something like /dev/cu.usbmodemE2C0C4C6 (do not use tty versions on OS X)"
                            },
                            "powerOverBMP": {
                                "type": "string",
                                "description": "Power up the board over Black Magic Probe. \"powerOverBMP\" : \"enable\" or \"powerOverBMP\" : \"disable\". If not set it will use the last power state."
                            }
                        },
                        "required": [
                            "executable"
                        ]
                    },
                    "launch": {
                        "properties": {
                            "servertype": {
                                "type": "string",
                                "description": "GDB Server type - supported types are jlink, openocd, pyocd, pe and stutil",
                                "enum": [
                                    "jlink",
                                    "openocd",
                                    "pyocd",
                                    "stutil",
                                    "bmp",
                                    "pe",
                                    "qemu"
                                ]
                            },
                            "cwd": {
                                "description": "Path of project",
                                "type": "string"
                            },
                            "debuggerArgs": {
                                "default": [],
                                "description": "Additional arguments to pass to GDB command line",
                                "type": "array"
                            },
                            "preLaunchCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed at the start of the main launch sequence (immediately after attaching to target)."
                            },
                            "postLaunchCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed after the main launch sequence has finished."
                            },
                            "preRestartCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed at the beginning of the restart sequence (after interrupting execution)."
                            },
                            "postRestartCommands": {
                                "default": [],
                                "type": "array",
                                "items": "string",
                                "description": "Additional GDB Commands to be executed at the end of the restart sequence."
                            },
                            "cpu": {
                                "default": "cortex-m3",
                                "type": "string",
                                "description": "CPU Type Selection - used for QEMU server type",
                                "enum": [
                                    "cortex-m3",
                                    "cortex-m4"
                                ]
                            },
                            "machine": {
                                "default": "lm3s811evb",
                                "type": "string",
                                "description": "Machine Type Selection - used for QEMU server type",
                                "enum": [
                                    "lm3s811evb",
                                    "lm3s6965evb"
                                ]
                            },
                            "device": {
                                "default": "",
                                "description": "Target Device Identifier",
                                "type": "string"
                            },
                            "rtos": {
                                "default": null,
                                "description": "RTOS being used. For JLink this can be FreeRTOS, embOS or the path to a custom JLink RTOS Plugin library. For OpenOCD this can be eCos, ThreadX, FreeRTOS, ChibiOS, embKernel, mqx, or uCOS-III.",
                                "type": "string"
                            },
                            "armToolchainPath": {
                                "default": null,
                                "description": "This setting can be used to override the armToolchainPath user setting for a particular launch configuration. This should be the path where arm-none-eabi-gdb and arm-none-eabi-objdump are located.",
                                "type": "string"
                            },
                            "executable": {
                                "description": "Path of executable",
                                "type": "string"
                            },
                            "runToMain": {
                                "description": "If enabled the debugger will run until it the start of the main function.",
                                "type": "boolean",
                                "default": false
                            },
                            "graphConfig": {
                                "items": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "annotate": {
                                                    "default": true,
                                                    "description": "Create annotations on the graph for when the target processor starts and stops execution. (green line for starting execution, red line for stopping execution).",
                                                    "type": "boolean"
                                                },
                                                "label": {
                                                    "description": "Label for Graph",
                                                    "type": "string"
                                                },
                                                "maximum": {
                                                    "default": 65535,
                                                    "description": "Maximum value for the X-Axis",
                                                    "type": "number"
                                                },
                                                "minimum": {
                                                    "default": 0,
                                                    "description": "Minimum value for the Y-Axis",
                                                    "type": "number"
                                                },
                                                "plots": {
                                                    "description": "Plot configurations. Data sources must be configured for \"graph\" (or \"advanced\" with a decoder that sends graph data) in the \"swoConfig\" section",
                                                    "items": {
                                                        "properties": {
                                                            "color": {
                                                                "pattern": "^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$",
                                                                "type": "string"
                                                            },
                                                            "graphId": {
                                                                "description": "Graph Data Source Id for the plot.",
                                                                "type": "string"
                                                            },
                                                            "label": {
                                                                "description": "A label for this data set",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "graphId"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "timespan": {
                                                    "default": 30,
                                                    "description": "Length of time (seconds) to be plotted on screen.",
                                                    "type": "number"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "realtime"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "label",
                                                "plots",
                                                "minimum",
                                                "maximum"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "label": {
                                                    "description": "Label for graph",
                                                    "type": "string"
                                                },
                                                "timespan": {
                                                    "default": 10,
                                                    "description": "The amount of time (seconds) that the XY Plot will show the trace for.",
                                                    "type": "number"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "x-y-plot"
                                                    ],
                                                    "type": "string"
                                                },
                                                "xGraphId": {
                                                    "description": "Graph Data Source Id for the X axis",
                                                    "type": "string"
                                                },
                                                "xMaximum": {
                                                    "default": 65535,
                                                    "description": "Maximum value on the X-Axis",
                                                    "type": "number"
                                                },
                                                "xMinimum": {
                                                    "default": 0,
                                                    "description": "Minimum value on the X-Axis",
                                                    "type": "number"
                                                },
                                                "yGraphId": {
                                                    "description": "Graph Data Source Id Port for the Y axis",
                                                    "type": "string"
                                                },
                                                "yMaximum": {
                                                    "default": 65535,
                                                    "description": "Maximum value on the Y-Axis",
                                                    "type": "number"
                                                },
                                                "yMinimum": {
                                                    "default": 0,
                                                    "description": "Minimum value on the Y-Axis",
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "xGraphId",
                                                "yGraphId",
                                                "label"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            "showDevDebugOutput": {
                                "default": false,
                                "description": "Prints all GDB responses to the console",
                                "type": "boolean"
                            },
                            "svdFile": {
                                "default": null,
                                "description": "Path to an SVD file describing the peripherals of the microcontroller; if not supplied then one may be selected based upon the 'device' entered.",
                                "type": "string"
                            },
                            "swoConfig": {
                                "properties": {
                                    "cpuFrequency": {
                                        "default": 0,
                                        "description": "Target CPU frequency in Hz.",
                                        "type": "number"
                                    },
                                    "enabled": {
                                        "default": false,
                                        "description": "Enable SWO decoding.",
                                        "type": "boolean"
                                    },
                                    "source": {
                                        "type": "string",
                                        "default": "probe",
                                        "description": "Source for SWO data. Can either be \"probe\" to get directly from debug probe, or a serial port device to use a serial port external to the debug probe."
                                    },
                                    "decoders": {
                                        "description": "SWO Decoder Configuration",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "properties": {
                                                        "label": {
                                                            "description": "A label for the output window.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "ITM Port Number",
                                                            "maximum": 31,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "console"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "encoding": {
                                                            "type": "string",
                                                            "default": "utf8",
                                                            "enum": [
                                                                "ascii",
                                                                "utf8",
                                                                "ucs2",
                                                                "utf16le"
                                                            ]
                                                        }
                                                    },
                                                    "required": [
                                                        "port"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "encoding": {
                                                            "default": "unsigned",
                                                            "description": "This property is only used for binary and graph output formats.",
                                                            "enum": [
                                                                "unsigned",
                                                                "signed",
                                                                "Q16.16",
                                                                "float"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "label": {
                                                            "description": "A label for the output window.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "ITM Port Number",
                                                            "maximum": 31,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "scale": {
                                                            "default": 1,
                                                            "description": "This setting will scale the raw value from the ITM port by the specified value. Can be used, for example, to scale a raw n-bit ADC reading to a voltage value. (e.g to scale a 12-bit ADC reading to a 3.3v scale you would need a scale value of 3.3/4096 = 0.0008056640625",
                                                            "type": "number"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "binary"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "encoding": {
                                                            "default": "unsigned",
                                                            "description": "This property is only used for binary and graph output formats.",
                                                            "enum": [
                                                                "unsigned",
                                                                "signed",
                                                                "Q16.16",
                                                                "float"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "graphId": {
                                                            "description": "The identifier to use for this data in graph configurations.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "ITM Port Number",
                                                            "maximum": 31,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "scale": {
                                                            "default": 1,
                                                            "description": "This setting will scale the raw value from the ITM port by the specified value. Can be used, for example, to scale a raw n-bit ADC reading to a voltage value. (e.g to scale a 12-bit ADC reading to a 3.3v scale you would need a scale value of 3.3/4096 = 0.0008056640625",
                                                            "type": "number"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "graph"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "graphId"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "config": {
                                                            "additionalProperties": true,
                                                            "type": "object"
                                                        },
                                                        "decoder": {
                                                            "description": "Path to a javascript module to implement the decoding functionality.",
                                                            "type": "string"
                                                        },
                                                        "ports": {
                                                            "description": "ITM Port Numbers",
                                                            "type": "array",
                                                            "items": {
                                                                "type": "number",
                                                                "maximum": 31,
                                                                "minimum": 0
                                                            }
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "advanced"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "ports",
                                                        "decoder"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "swoFrequency": {
                                        "default": 0,
                                        "description": "SWO frequency in Hz.",
                                        "type": "number"
                                    }
                                },
                                "required": [],
                                "type": "object"
                            },
                            "ipAddress": {
                                "default": null,
                                "description": "IP Address for networked J-Link Adapter",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$",
                                "type": "string"
                            },
                            "serialNumber": {
                                "default": null,
                                "description": "J-Link Serial Number - only needed if multiple J-Links are connected to the computer",
                                "type": "string"
                            },
                            "interface": {
                                "default": "swd",
                                "description": "Debug Interface type to use for connections (defaults to SWD) - Used for J-Link and BMP probes.",
                                "type": "string",
                                "enum": [
                                    "swd",
                                    "jtag"
                                ]
                            },
                            "jlinkscript": {
                                "default": null,
                                "description": "J-Link script file - optional input file for customizing J-Link actions.",
                                "type": "string"
                            },
                            "configFiles": {
                                "description": "OpenOCD configuration file(s) to load",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "searchDir": {
                                "default": [],
                                "description": "OpenOCD dir to search for config files and scripts",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "v1": {
                                "default": false,
                                "description": "Set this to true if your debug probe is a ST-Link V1 (for example, the ST-Link on the STM32 VL Discovery is a V1 device). When set to false a ST-Link V2 device is used.",
                                "type": "boolean"
                            },
                            "targetId": {
                                "description": "On BMP this is the ID number that should be passed to the attach command (defaults to 1); for PyOCD this is the target identifier (only needed for custom hardware)",
                                "anyOf": [
                                    {
                                        "enum": [
                                            "kl25z",
                                            "kl26z",
                                            "lpc824",
                                            "k82f25615",
                                            "lpc11xx_32",
                                            "kinetis",
                                            "lpc800",
                                            "lpc4088qsb",
                                            "maxwsnenv",
                                            "kl05z",
                                            "k64f",
                                            "lpc1768",
                                            "lpc4088",
                                            "lpc4330",
                                            "max32600mbed",
                                            "k66f18",
                                            "w7500",
                                            "ke18f16",
                                            "k22f",
                                            "lpc4088dm",
                                            "ke15z7",
                                            "kv11z7",
                                            "nrf51",
                                            "nrf52",
                                            "kv10z7",
                                            "k20d50m",
                                            "kl46z",
                                            "stm32f103rc",
                                            "kl27z4",
                                            "kw40z4",
                                            "cortex_m",
                                            "lpc11u24",
                                            "stm32f051",
                                            "kl02z",
                                            "ncs36510",
                                            "kl28z",
                                            "kl43z4",
                                            "kw01z4"
                                        ],
                                        "type": "string"
                                    },
                                    {
                                        "type": "number",
                                        "minimum": 1
                                    }
                                ]
                            },
                            "boardId": {
                                "description": "PyOCD Board Identifier. Needed if multiple compatible boards are connected.",
                                "type": "string"
                            },
                            "BMPGDBSerialPort": {
                                "type": "string",
                                "description": "The serial port for the Black Magic Probe GDB server. On Windows this will be \"COM<num>\", on Linux this will be something similar to /dev/ttyACM0, on OS X something like /dev/cu.usbmodemE2C0C4C6 (do not use tty versions on OS X)"
                            },
                            "powerOverBMP": {
                                "type": "string",
                                "description": "Power up the board over Black Magic Probe. \"powerOverBMP\" : \"enable\" or \"powerOverBMP\" : \"disable\". If not set it will use the last power state."
                            }
                        },
                        "required": [
                            "executable"
                        ]
                    }
                },
                "configurationSnippets": [
                    {
                        "body": {
                            "cwd": "^\"\\${workspaceRoot}\"",
                            "executable": "${1:./bin/executable.elf}",
                            "name": "${6:Debug Microcontroller}",
                            "request": "launch",
                            "type": "cortex-debug",
                            "servertype": "jlink"
                        },
                        "description": "Debugs an embedded ARM Cortex-M microcontroller using GDB + JLink",
                        "label": "Cortex Debug: JLink"
                    },
                    {
                        "body": {
                            "cwd": "^\"\\${workspaceRoot}\"",
                            "executable": "${1:./bin/executable.elf}",
                            "name": "${6:Debug Microcontroller}",
                            "request": "launch",
                            "type": "cortex-debug",
                            "servertype": "openocd"
                        },
                        "description": "Debugs an embedded ARM Cortex-M microcontroller using GDB + OpenOCD",
                        "label": "Cortex Debug: OpenOCD"
                    },
                    {
                        "body": {
                            "cwd": "^\"\\${workspaceRoot}\"",
                            "executable": "${1:./bin/executable.elf}",
                            "name": "${6:Debug Microcontroller}",
                            "request": "launch",
                            "type": "cortex-debug",
                            "servertype": "stutil"
                        },
                        "description": "Debugs an embedded ARM Cortex-M microcontroller using GDB + Texane's st-util GDB server (https://github.com/texane/stlink)",
                        "label": "Cortex Debug: ST-Util"
                    },
                    {
                        "body": {
                            "cwd": "^\"\\${workspaceRoot}\"",
                            "executable": "${1:./bin/executable.elf}",
                            "name": "${6:Debug Microcontroller}",
                            "request": "launch",
                            "type": "cortex-debug",
                            "servertype": "pyocd"
                        },
                        "description": "Debugs an embedded ARM Cortex-M microcontroller using GDB + PyOCD",
                        "label": "Cortex Debug: PyOCD"
                    }
                ],
                "enableBreakpointsFor": {
                    "languageIds": [
                        "c",
                        "cpp",
                        "asm",
                        "arm",
                        "cortex-debug.disassembly",
                        "rust"
                    ]
                },
                "initialConfigurations": [
                    {
                        "name": "Cortex Debug",
                        "cwd": "${workspaceRoot}",
                        "executable": "./bin/executable.elf",
                        "request": "launch",
                        "type": "cortex-debug",
                        "servertype": "jlink"
                    }
                ],
                "extensions": [],
                "label": "Cortex Debug",
                "program": "./out/src/gdb.js",
                "runtime": "node",
                "type": "cortex-debug",
                "variables": {}
            },
            {
                "configurationAttributes": {
                    "attach": {
                        "properties": {},
                        "required": []
                    },
                    "launch": {
                        "properties": {},
                        "required": []
                    }
                },
                "enableBreakpointsFor": {
                    "languageIds": [
                        "c",
                        "cpp",
                        "asm",
                        "arm",
                        "rust"
                    ]
                },
                "extensions": [],
                "label": "Cortex Debug: OpenOCD (Deprecated)",
                "program": "./out/src/gdb.js",
                "runtime": "node",
                "type": "openocd-gdb",
                "variables": {}
            },
            {
                "configurationAttributes": {
                    "attach": {
                        "properties": {},
                        "required": []
                    },
                    "launch": {
                        "properties": {},
                        "required": []
                    }
                },
                "enableBreakpointsFor": {
                    "languageIds": [
                        "c",
                        "cpp",
                        "asm",
                        "arm",
                        "rust"
                    ]
                },
                "extensions": [],
                "label": "Cortex Debug: JLink (Deprecated)",
                "program": "./out/src/gdb.js",
                "runtime": "node",
                "type": "jlink-gdb",
                "variables": {}
            },
            {
                "configurationAttributes": {
                    "attach": {
                        "properties": {},
                        "required": []
                    },
                    "launch": {
                        "properties": {},
                        "required": []
                    }
                },
                "enableBreakpointsFor": {
                    "languageIds": [
                        "c",
                        "cpp",
                        "asm",
                        "arm",
                        "rust"
                    ]
                },
                "extensions": [],
                "label": "Cortex Debug: PEMicro (Deprecated)",
                "program": "./out/src/gdb.js",
                "runtime": "node",
                "type": "pe-gdb",
                "variables": {}
            },
            {
                "configurationAttributes": {
                    "attach": {
                        "properties": {},
                        "required": []
                    },
                    "launch": {
                        "properties": {},
                        "required": []
                    }
                },
                "enableBreakpointsFor": {
                    "languageIds": [
                        "c",
                        "cpp",
                        "asm",
                        "arm",
                        "rust"
                    ]
                },
                "extensions": [],
                "initialConfigurations": [],
                "label": "Cortex Debug: ST-Util (Deprecated)",
                "program": "./out/src/gdb.js",
                "runtime": "node",
                "type": "stutil-gdb",
                "variables": {}
            },
            {
                "configurationAttributes": {
                    "attach": {
                        "properties": {},
                        "required": []
                    },
                    "launch": {
                        "properties": {},
                        "required": []
                    }
                },
                "enableBreakpointsFor": {
                    "languageIds": [
                        "c",
                        "cpp",
                        "asm",
                        "arm",
                        "rust"
                    ]
                },
                "extensions": [],
                "label": "Cortex Debug: PyOCD (Deprecated)",
                "program": "./out/src/gdb.js",
                "runtime": "node",
                "type": "pyocd-gdb",
                "variables": {}
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "cortex-debug.peripherals.updateNode",
                    "when": "false"
                },
                {
                    "command": "cortex-debug.peripherals.selectedNode",
                    "when": "false"
                },
                {
                    "command": "cortex-debug.peripherals.copyValue",
                    "when": "false"
                },
                {
                    "command": "cortex-debug.peripherals.forceRefresh",
                    "when": "false"
                },
                {
                    "command": "cortex-debug.registers.copyValue",
                    "when": "false"
                },
                {
                    "command": "cortex-debug.examineMemory",
                    "when": "debugType == cortex-debug"
                },
                {
                    "command": "cortex-debug.viewDisassembly",
                    "when": "debugType == cortex-debug"
                },
                {
                    "command": "cortex-debug.setForceDisassembly",
                    "when": "debugType == cortex-debug"
                }
            ],
            "view/item/context": [
                {
                    "command": "cortex-debug.peripherals.updateNode",
                    "when": "view == cortex-debug.peripherals && viewItem == field"
                },
                {
                    "command": "cortex-debug.peripherals.updateNode",
                    "when": "view == cortex-debug.peripherals && viewItem == registerRW"
                },
                {
                    "command": "cortex-debug.peripherals.updateNode",
                    "when": "view == cortex-debug.peripherals && viewItem == registerWO"
                },
                {
                    "command": "cortex-debug.peripherals.copyValue",
                    "when": "view == cortex-debug.peripherals && viewItem == field"
                },
                {
                    "command": "cortex-debug.peripherals.copyValue",
                    "when": "view == cortex-debug.peripherals && viewItem == registerRW"
                },
                {
                    "command": "cortex-debug.peripherals.copyValue",
                    "when": "view == cortex-debug.peripherals && viewItem == registerRO"
                },
                {
                    "command": "cortex-debug.peripherals.forceRefresh",
                    "when": "view == cortex-debug.peripherals && viewItem == registerRW"
                },
                {
                    "command": "cortex-debug.peripherals.forceRefresh",
                    "when": "view == cortex-debug.peripherals && viewItem == register"
                },
                {
                    "command": "cortex-debug.peripherals.forceRefresh",
                    "when": "view == cortex-debug.peripherals && viewItem == registerRO"
                },
                {
                    "command": "cortex-debug.peripherals.forceRefresh",
                    "when": "view == cortex-debug.peripherals && viewItem == peripheral"
                },
                {
                    "command": "cortex-debug.registers.copyValue",
                    "when": "view == cortex-debug.registers && viewItem == register"
                },
                {
                    "command": "cortex-debug.registers.copyValue",
                    "when": "view == cortex-debug.registers && viewItem == field"
                },
                {
                    "command": "cortex-debug.peripherals.setFormat",
                    "when": "view == cortex-debug.peripherals"
                },
                {
                    "command": "cortex-debug.registers.setFormat",
                    "when": "view == cortex-debug.registers"
                }
            ],
            "view/title": []
        },
        "views": {
            "debug": [
                {
                    "id": "cortex-debug.peripherals",
                    "name": "Cortex Peripherals",
                    "when": "debugType == cortex-debug"
                },
                {
                    "id": "cortex-debug.registers",
                    "name": "Cortex Registers",
                    "when": "debugType == cortex-debug"
                }
            ]
        }
    },
    "dependencies": {
        "binary-parser": "^1.3.0",
        "bindings": "^1.3.0",
        "command-exists": "^1.2.2",
        "commander": "^2.13.0",
        "copy-paste": "^1.3.0",
        "debug": "^4.1.1",
        "hasbin": "^1.2.3",
        "nan": "^2.8.0",
        "portastic": "^1.0.1",
        "prebuild-install": "^5.2.2",
        "promirepl": "^1.0.1",
        "ringbufferjs": "^1.1.0",
        "safe-buffer": "^5.1.1",
        "tmp": "0.0.33",
        "universal-analytics": "^0.4.16",
        "uuid": "^3.2.1",
        "vscode-debugadapter": "^1.16.0",
        "vscode-debugprotocol": "^1.16.0",
        "vscode-extension-telemetry": "0.1.1",
        "ws": "^6.1.2",
        "xml2js": "^0.4.19"
    },
    "description": "ARM Cortex-M GDB Debugger support for VSCode",
    "devDependencies": {
        "@types/mocha": "^5.2.5",
        "@types/node": "^10.12.18",
        "mocha": "^5.2.0",
        "tslint": "^5.9.1",
        "typescript": "^3.2.4",
        "vscode": "^1.1.26"
    },
    "displayName": "Cortex-Debug",
    "engines": {
        "vscode": "^1.29.0"
    },
    "icon": "images/icon.png",
    "keywords": [
        "cortex-m",
        "gdb",
        "debug",
        "embedded"
    ],
    "main": "./out/src/frontend/extension",
    "name": "cortex-debug",
    "preview": true,
    "publisher": "marus25",
    "repository": {
        "type": "git",
        "url": "https://github.com/Marus/cortex-debug.git"
    },
    "scripts": {
        "compile": "tsc -p ./",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "vscode:prepublish": "tsc -p ./",
        "watch": "tsc -watch -p ./"
    },
    "version": "0.2.4"
}
